TOKENS:
  - eyJhbGciOiJkaXIiLCJlbmMiOiJBMjU2R0NNIn0..82xbDxeQSf-O-L-_.GDidMmlQOpRldN1UZUJeKKbukuVcnb7luzNFryfdhJdwBO26jHJ_vT-PQjpH1AUT38EuUog3b1tUC92CHf4knXZD3UWidG6SqZl4EePyQIdmlnMrULe-zIS9yyq1G7qeL2jgnPcZzLnqsEBJ2Ju_4cts4yNLgQ-7uVZULLIOEN3or-8CNm8LQR9xm-c7AxPxTfmSPQdixeCrVXYBeYoGGZyOOKZahzQyM8s2NiTMhcNXHp50CPzsc31zeb6WGIc9uSpuhPYekRYPrfQFT8NrslwyYFDr9hQWW1ZHnuRD0R5_LsapGGYJVRu3JfcnFIFRBxIV3biz3cpuRZP3ylADCreEa0LJjfo36P9oivFEFUSrzNGLQoK9EltHgEMFaJLSGvX22j6rLSATDwI7zMvB-3k9YH6hdzF_0haKPoxhRHHVcrLXE9EYTEBdYCnJYrW53kFZn2MRejVrNdIBa6Cu7IPPuDnfPu94S0BkdHTB2uibBKSefTMY3iC7OYMNRtvdhcgwDN-gfxa_j_zArYjr9IWIJz2ETRtFe5qazpT__4iWcpJZ_6ez7rVshDqjk0dqKVg4Jo9y2ccSIhjKAnC_JbMUCXfJ6zha__sDic1fX-OEX7fCslsPgg8i6J__K4D2jv8Z6kINxaokQ9JREqkUghru8CPSiPRyfxHbMxOTj547xLQz9-12rKwlUa-F0SZRc0_tLFIxRyAytp6jWYOVfJvoSPdP3VCVh-8u99ifASNM8tf5Z9gbRmwe427XU_wrf79Kprvc6fkEDDAV5jlwoc_0jNLmwLjTaCxnh9Kr6w-RsOrFkAZKDb63lpoNg7VWFAfSlIstrz5Arcdr7BxxqIOmUD4PeutpGZeDwJhhVvXhlUX277zrU4lFtE_hocLQhfTK5DMMsAxaGLHyMFMjt5WnuQK5nwLJdpPmtZp_-0ezU7hbce8P0sCEkqUa0nm8pdi6LY-1k85iKA1ihTObeDMIPnkReTyOwSiXwzimlpQiP134itObPC1lAz9ZcTc_i3mdFTymRpr0moU1bTphzgDcmSS0p091HPZEzymoEeQBpj3cywIHLXfE4B0WlnUKd0cizYxHLMWBnHxwM9KOT2YLD6w_OjtpRqWxhlhL40Q0p3HJWChLdzblVlt4nh2K13dlAR-gfzYclTL9WJBO39d7D43smCOiWjX_k8n_xRn0IYAP8duTwMszd-S42wtcKqgrZI6IHNcTLXhonVcbFcVdka2TIX-1TiujfLBOfg-7H9IYM3ba2iOkZhbxKF292kwVR8W5w9wydk-zWWC4XOFS-K7-39zcv8aSrGz9i37ABQOq1qp_nxadMwJH3_ICoE7M6vwDHMzFS2chD6Wi9UwdF71P7ndu9t4AA905S29nyuYgVYBfd8nPEgK_z3zrm014acaUi8sML_DA2IQ-jJ8upsygGSBJ6rKrISP2XTNYPdfI4f8laa4eWvJssxRGpFlUcMiVDk_pZe8loE_yC3Si-Z67QZUHRbJyGLUgNCt9WVymJaeGDXIesOsthWKmm4sGSizl_Z8mFzRQfewuCZsLYf0pLk0kmnFpjZ-Zb0E0ohExhkxd3PaK5ih7Fm1lpdrtLGURVhfOUx_prrbMJk99S4lP6AcLGcFCfW_9jFw2TQj9XamGsEIhTN07QcrEgd17NWvggxnMrhGnZOgapB_2q1P__pYabLq9CrXXB2X1DzSRsNQUYW5-N1d7ibaIB7UkHj5pdQcoWHOtNTztQ_qqxzs-HuS_At1SPjT_d2MUBX3ptL8WTog-ZKJM7gpPJsxOUNsHfw7V1nkUDUn10uygkG-hHnQq-gV1dTPMeicmnZFGfNWS-3dEuGMWTi8f72LhDbBUxX7iDmxRoZ4lgSsFt4yDyQdR2fFYWFd-zF0A4UgOheQo-cJNTq1VD8uPCIxV3WiLaJwN0W-pWQKuS3bO1MeY3LUr6vprRaj_QfioytbuGQgig76ywZzImzjgymv-u-rDdNsIBbcATIPfnc4vhArYO55qlJBsbe2H-qNiRKO_vh6--A-dAp0s_2_3e9M87_-WERgGWbD9W37QOSr-m39uQQcO9Jt1R5nynEuAKSPq3cIS4CT2mf_VUxD427Wi3Q1fLz8S6vWcvmlMJXgbO9kYla-zJFWWufrg8UYMCryvHeh2h1KxBUCP520_tdQPMQEhbXNobm7e2HrrfjU_H3XZr_T4W8xD24u0c1wCOkNufw3oZx7hcHz41k-jS0yeXSmP1yaL6BNyWWF9T2r-oNdqpkVyHWvW9FW8bXVMPqUlAa50zcgvL5eYhjTbajL4WrZ5gGQO6ZxOyzKTJR0KCJKO3n_6BXO2hAYSFE0W-JwgwrGGVrSH0a8EcypAR4lPFdkuq2S7zaaE1Ws1lk5GRUGd--r2sbiniAWMpbXumXEK4Um-kNwlBFiGfttZg0s7BBTQ6bgdRGFm0H65MDODDZzNyh-gR3I4ZrBwiLMhcfuLh9pEIlmPmWp8jy_AwBjYrwK4dJ_MMLR9y7FSU06bh9xdtHbOeZxHc_qf2YJnly-7hfer-2-BOl_TRQ.u9NITC1owXGpphoLT74RXg
  - eyJhbGciOiJkaXIiLCJlbmMiOiJBMjU2R0NNIn0..FxggMT_5lTG8LNaS.WZsoof0ojIEBniaHVrOeik7UBLjivtV8hPTUlV2xzqFycE2U9fwyc67crEfL0aqX8SLOHKtPqLTb6WlBt2lktYQGBkg-JXYi75MGLc5-FTvz-YUaDTRfju9ELahE0SBbIq7_CXprn51MIKqk6UfZUBHFgcLjuw9irWk5PxXaDyBGQOmVd3CT_GQUs6H6fnVEydKA2PNs0F-K3NbvVcty9ggfMtky45oJg9orLl7eyTUR70v0BfDMsAsUPiUVjH_KaDqATD3cH4Rb6TM3CXweO_t8TyizFAEOG_EiM1viz-ZiiUn4LCNEuPtYrK0PTtaJ-DXEZd_Fa-eJRDGmlJckiWvR8HLlis8C4UYagF1ROozRFPdM1SPFExtxoDKJTq1pNKsyttd7rc-Or1V_xhKnY1eQMS4gHsqZFoznmvg3_xhVYDvJzjJq5XklBiJIjpTMIb8CsJeGPZ5LcjhurcDKorLbRDeB4-wBmfbm6gHKvGgL4nG9wzDekCN8Sp8gFhXhANnSjO2UZoWItDS3Le-G84VfB6UV_veeChOup7xESVMyecIH8hAMS0sgZqb0auaALgRZzWjrvXVz5w6aTjLHqTVeokw5u8vf52tHfOSNLxGyTn1EkcQE-a_UtHOLZW611Ec-h7snShhewCuAXoRYpXTVayC28K3Wmnt_lWThgK-Woml_Zsb2sUqfwNzVKOqysMbzXRBDFSBFaF3dtE08VmAVOVe-00H3nihpCIa08ZfGlYigJgHMUyKh4Gu9SKr3V0DEHlEer65q-QytHpPFyO8XNB5LGMMy_f4YgLXUPy1bgUU9QiwRR7sRUqWzwLj_u5tZlmY3f2XnbsXpAaIOVvXSwWnNwYj-r9KY32pB3jEthy3PtUj_4ZHta90qyd0stDtQniPs2mj5G2WBWNPgCQQQr3FzzTf4McU7L-w3aUwpoK5g9WFRx-6CoHZSQJlc1Oe2imPoWpNAEuGoZGr1tsibArShZXa3f703V6R07o6TTItKVlElH70I3v2hb7T-lkZLbGojXKqzc2GpUoqEv6C9hlx1acstjnGbz_q1WGeBE6ZBaNSzxJ6cYdqT4Q9qKS-ZoVuU-IWKMtLqllv9ycCT7JPoDYtvmX0WOVXSTNuovmZEYzDxyyFRyS-oKm_REHlqWrKnDQeoZOOL6R6WlfT-18KK9SvP6Q356d6qxMd3pk5vZ0CtuWd_UT5-bPYuWUR-lrWC0u6Ry3Fd7sMZruIMOVxTEAf3V3tRfLWGXoCG9w0DWRiTyVkuYttw-PosOEPp07D8ztk7ZkU1VjFh3iUX_Di9PYo___qUJa3R5mrB9FLdnsAZQYtKQcur5POmKvP8lO5JUWG4K6rxbiIuFEeBIXzwV8SRTkD7nxVETbprApcevAZEXqIcD8rSo-qZG4wEgQL-aoRbMwqieihfaXXR_Gum9ra5E3nE23Osismp29JNjKVbdzTH-PgpjNPHcCT5cn7SgTHEo9oeOdEx2Kwmd8a4JfIuXsDNntbApB6MHL4f164010VmLRoZi95SBtIT_WvMvYUbyLBBrYdbda4leeVeoSKA857huqo1qsWtqYsEijeP418a0Ryy5jSX0PWiafe2mCavC9FORjFvRTjzdYf6ErdYySO-Q43e5O7Iy7jDEftCOErBqcj0zmyjmzvSjJZayp_qj3xWo9xOfKriYH7raME0EG9uJr-liq2YRm5Z2MZRowwMTUC4Fib-6CmiWlZStx4bw9-iM5W-rJDHV2cLsGkRPxEsIFMV3y-r_AUT55Ie8Id_FWyehVetqVb0013K1FmZYA8il8vouBxpntD6kt_avbjc1qzlM9B5bkAK0m0fmeudHIKNeYlD53roRNnKwYKwMyKpj2iQrwZSbo54wsXnvS8GQ1vBNC_aorCa56nOlWpP6J4g2sv_3KyZH3ZfiI2lBWsZS2ZvOFy8fwMBRaXim27jAWfGoaLo5pdyywcQOGiLq9CAi4EIfRjLeYjHgemvK11e1VsVkS2ND-8zGutrOoyBK6jnylBdeHf8pXwUdNWYdZoIugFMktpmS4UyefT1kMVDTeqRSKeymAj9TglsBW-je864MCnSfNZQjmUG9QB6eyrS8RnoNzQOes1ceVf2Tw51IM90OCPzyYgrj8Bxg66hFLj0tH_bfSpyygW2-nQgDCr1LLr3stodq6LpdwIXnhxUQnM3FZJqxdfyYMqTbB_-GXi3jo1ctNpnZiVbxBRxNxpTkZC4ex_hfikFF0WNnPskPVLgLo6ug5u1cavV4TOtygot3zYmAHay7W2TNxHkgW2FVz8y9XkQckGACHbF3J56n9Bmqn-TDzG9b9mAGTKnxa2fad61-htPmoME74Y9zWVPrb9JuMkaVnCPhXRf8tfC6-vXk_TT0iaplAbYNTZKMPRtQLqHCD243aKjxecFGGvzBebcTUptj65-hcZKsnhzMtwxspGwzQd-amNfqSEI0DceKvW7fe8dCpklnBIeQaFeY1oqx3h4rvmyE2Mzp0gp4heEjz0zuFxG90xbBD4vCsCadTXVjl0wnqfKcfbBSTAZXw.DVT9uuGKJC7I-C4I4aQbzQ

QUESTION: "What are the Wikipedia topics that best describe the following groups of entities (the number of times in parenthesis corresponds to how often these entities are found in the topic, and should be taken into account when making a decision)?"
CLARIFICATION: "Please only provide the topic name that best describes the group of entities, and a confidence score between 0 and 100 on how sure you are about the answer. If confidence is not high, please provide a list of entities that, if discarded, would help identify a topic. The structure of the answer should be a list of tuples of four elements: [(list identifier, topic name, confidence score, list of entities to discard (None if there are none)), ... ]. For example:"
REQUEST: "Please avoid very general topic names (such as 'Science' or 'Technology') and return only the list of tuples with the answers using the structure above (it will be parsed by Python's ast literal_e method)."
EXAMPLE: "[('List 1', 'Machine learning', 100, ['Russian Spy', 'Collagen']), ('List 2', 'Cosmology', 90, ['Matrioska', 'Madrid'])]"
ERROR: "Your response is not a list with the requested structure. Remember that I only want the topic name that best describes the group of entities, and a confidence score between 0 and 100 on how sure you are about the answer. If confidence is not high, also provide a list of entities that, if discarded, would help identify a topic. The structure of the answer should be a list of tuples of four elements: [(list identifier, topic name, confidence score, list of entities to discard (None if there are none)), ... ]. For example:"
NEXT: "Can you do the same to the following list of additional groups:"

PREPRUNE-INTRO: "I have created a hierarchical taxonomy of topics that are relevant to the academic literature and the commercialization of science. This taxonomy is created from a list of entities, which represent Wikipedia topics and which should represent relevant concepts in academia. These entities are clustered into topics given a co-occurrence matrix. \n\n The problem is that some of these entities may instead represent modern day countries, regions, or cities. If possible, also identify institutions and films. \n\n Your task is to identify these entities and remove them from the taxonomy. I will give you a list of entities and you will return the list of entities to remove. \n\n Your response should be a single Python list of entities that should be removed. For example, if you think that the entities 'United States', 'United Kingdom', and 'Canada' should be removed, you would respond with ['United States', 'United Kingdom', 'Canada']. \n\n If you think that no entities should be removed, you would respond with an empty list, like this: []. \n\n Here is a first list of entities: \n\n"
PREPRUNE-REQUEST: "Your task is to identify entities in a list that represent modern day countries, regions, or cities. If possible, also identify institutions and films. \n\n Your response should be a single Python list of entities that correspond to these categories. Please return a single list. For example, if you think that the entities 'United States', 'United Kingdom', and 'Canada' correspond to modern-day countries, you would respond with ['United States', 'United Kingdom', 'Canada']. \n\n If you think that no entities match any of the above categories, you would respond with an empty list, like this: []. \n\n Here is the list of entities: \n\n"

PRUNE-ERROR: Your response was not a single Python list. Please try again. Remember that your task is to identify the entities that may represent modern day countries, regions, cities, institutions and films. \n\n Your response should be a single Python list of entities that are in one of the categories above, and the list should be empty if you think that no entities belong to those categories. Please return a single list."

TAG-INTRO: "I am going to provide you with lists of words. The majority are technical terms, but there are some which are related to a country, either because they are a city, area, or region, or because they are an organization or institution that operates in an area, city, or region of that country. These words may simply be associated to a country's culture, society, or politics. \n\n Your task is to produce a single Python list of tuples with countries as the first item of a tuple and the words in the list that relate to each country as a list in the second value of the tuple. Words that do not meet any of the criteria should be ignored. \n\n For example, given a list ['Madrid', 'Calidris', 'The Troubles', 'Đồng Tháp Province', 'Jyväskylä', 'Eastman Dental Hospital'], your reply should be: \n\n '[('Spain', ['Madrid']), ('Vietnam', ['Đồng Tháp Province']), ('United Kingdom', ['Eastman Dental Hospital']), ('Finland', ['Jyväskylä'])]'. Another example: given the list ['Isophorone', 'Quetta', 'Accelerator Test Facility', 'Taiwan Railways Administration', 'Neurite', 'Neospora caninum', 'Galapagos NV', 'GTF2I'], the answer should be [('Belgium', ['Galapagos NV']), ('Pakistan', ['Quetta']), ('Taiwan', ['Taiwan Railways Administration'])] \n\n Please confirm you understood your instructions and are ready to process the first list of words."
TAG-ERROR-NOLIST: "The response contains no lists. Remember that your task is to identify words which may be related to a country, either because they are a city, area, or region, or because they are an organization or institution that operates in an area, city, or region of that country. These words may simply be associated to a country's culture, society, or politics. The output should be a single Python list of tuples with countries as the first item of a tuple and the words in the list that are part of each country as a list in the second value of the tuple. Words that do not meet any of the criteria should be ignored. For example, given a list ['Madrid', 'Calidris', 'The Troubles', 'Đồng Tháp Province', 'Jyväskylä', 'Eastman Dental Hospital'], your reply should be: \n\n '[('Spain', ['Madrid']), ('Vietnam', ['Đồng Tháp Province']), ('United Kingdom', ['Eastman Dental Hospital']), ('Finland', ['Jyväskylä'])]'. Please try again."
